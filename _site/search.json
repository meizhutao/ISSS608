[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "In-class Exercise/Hands-on_Ex06/Hands-on_Ex06-VisTime.html",
    "href": "In-class Exercise/Hands-on_Ex06/Hands-on_Ex06-VisTime.html",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a horizon chart"
  },
  {
    "objectID": "In-class Exercise/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#getting-started",
    "href": "In-class Exercise/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#getting-started",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Getting Started",
    "text": "Getting Started\n::: callout-info ## Do It Yourself Write a code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\n\nShow the code\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, tidyverse, readxl, knitr, data.table)"
  },
  {
    "objectID": "In-class Exercise/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#plotting-calendar-heatmap",
    "href": "In-class Exercise/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Plotting Calendar Heatmap",
    "text": "Plotting Calendar Heatmap\nIn this section, you will learn how to plot a calender heatmap programmetically by using ggplot2 package.\n\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\nThe Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\nImporting the data\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks <- read_csv(\"data/eventlog.csv\")\n\n\n\nExamining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\n\ntz field stores time zone of the source IP address.\n\n\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\n\nData Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\nNote: ymd_hms() and hour() are from lubridate package and weekdays() is a base R function.\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nNote: Beside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\nBuilding the Calendar Heatmaps\n\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\nThings to learn from the code chunk: - a tibble data table called grouped is derived by aggregating the attack by wkday and hour fields. - a new field called n is derived by using group_by() and count() functions. - na.omit() is used to exclude missing value. - geom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles. - theme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot. - coord_equal() is used to ensure the plot will have an aspect ratio of 1:1. - scale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\nBuilding Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n\nPlotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n\n\n\nPlotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "In-class Exercise/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#cycle-plot",
    "href": "In-class Exercise/Hands-on_Ex06/Hands-on_Ex06-VisTime.html#cycle-plot",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Cycle Plot",
    "text": "Cycle Plot\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\nData Preparation\n\nStep 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\nStep 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n\n\n\nStep 4: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n\n\n\nStep 5: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\nPlotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")"
  },
  {
    "objectID": "In-class Exercise/In-class Ex3/In-class Ex3.html",
    "href": "In-class Exercise/In-class Ex3/In-class Ex3.html",
    "title": "In-class Ex3",
    "section": "",
    "text": "Installing and loading R packages\nTwo packages will be installed and loaded. They are tidyverse and ggiraph.\n\npacman::p_load(ggiraph, tidyverse)\n\nImporting data\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "In-class Exercise/In-class Ex4/In-class Ex4.html",
    "href": "In-class Exercise/In-class Ex4/In-class Ex4.html",
    "title": "In-Class Ex 4",
    "section": "",
    "text": "pacman::p_load(plotly,DT,ggstatsplot, ggplot2, patchwork,readxl, performance, parameters, see, tidyverse)\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\nplot_ly (data = exam_data,\n              x= ~ENGLISH,\n              y= ~MATHS,\n              color = ~RACE)\n\n\n\n\n\n\nggplot(data= exam_data,\n           aes(x= MATHS,\n               y= ENGLISH))+\n  geom_point(dotsize= 1)+\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\n\n\n\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\nmy_sum <- exam_data %>%\n  group_by(RACE) %>%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %>%\n  mutate(se=sd/sqrt(n-1))\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n \n  \n    RACE \n    n \n    mean \n    sd \n    se \n  \n \n\n  \n    Chinese \n    193 \n    76.50777 \n    15.69040 \n    1.132357 \n  \n  \n    Indian \n    12 \n    60.66667 \n    23.35237 \n    7.041005 \n  \n  \n    Malay \n    108 \n    57.44444 \n    21.13478 \n    2.043177 \n  \n  \n    Others \n    9 \n    69.66667 \n    10.72381 \n    3.791438 \n  \n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean \n          maths score by rac\")\n\n\n\n\n\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model       Price Age_0…¹ Mfg_M…² Mfg_Y…³     KM Quart…⁴ Weight Guara…⁵\n   <dbl> <chr>       <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>  <dbl>   <dbl>\n 1    81 TOYOTA Cor… 18950      25       8    2002  20019     100   1180       3\n 2     1 TOYOTA Cor… 13500      23      10    2002  46986     210   1165       3\n 3     2 TOYOTA Cor… 13750      23      10    2002  72937     210   1165       3\n 4     3  TOYOTA Co… 13950      24       9    2002  41711     210   1165       3\n 5     4 TOYOTA Cor… 14950      26       7    2002  48000     210   1165       3\n 6     5 TOYOTA Cor… 13750      30       3    2002  38500     210   1170       3\n 7     6 TOYOTA Cor… 12950      32       1    2002  61000     210   1170       3\n 8     7  TOYOTA Co… 16900      27       6    2002  94612     210   1245       3\n 9     8 TOYOTA Cor… 18600      30       3    2002  75889     210   1245       3\n10    44 TOYOTA Cor… 16950      27       6    2002 110404     234   1255       3\n# … with 1,426 more rows, 28 more variables: HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>,\n#   Radio <dbl>, Mistlamps <dbl>, Sport_Model <dbl>, Backseat_Divider <dbl>, …\n\n\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n <- check_normality(model1)\nplot(check_n)"
  },
  {
    "objectID": "In-class Exercise/In-class Ex5/In-class Ex5.html",
    "href": "In-class Exercise/In-class Ex5/In-class Ex5.html",
    "title": "In-class Ex5",
    "section": "",
    "text": "pacman::p_load(corrplot, tidyverse, ggstatsplot)\n\n\nwine <- read_csv(\"data/wine_quality.csv\")\n\nRows: 6497 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): type\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\npairs(wine[,1:11])\n\n\n\n\n\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter"
  },
  {
    "objectID": "In-class Exercise/In-class Ex7/In-class Ex7.html",
    "href": "In-class Exercise/In-class Ex7/In-class Ex7.html",
    "title": "In-class Ex7",
    "section": "",
    "text": "Show the code\npacman::p_load(sf, tmap, tidyverse,ggplot2)\n\n\n\n\nShow the code\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\meizhutao\\ISSS608\\In-class Exercise\\In-class Ex7\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to “ISSS608-Visual Analytics and Applications”\nThis is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "[Age-sex pyramid]is an analytical visualisation commonly used by demographers to reveal the structure of population by gender and age group. In this take-home exercise, we will reveal the demographic structure of Singapore at planning area level by using age-sex pyramid method. we are required to display nine selected planning areas on a single view by using [trellis display (also know as small-multiple plot)]."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#load-the-respopagesextod2022.csv-into-tableau-prep-builders.-click-the-check-box-of-use-data-interpreter.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#load-the-respopagesextod2022.csv-into-tableau-prep-builders.-click-the-check-box-of-use-data-interpreter.",
    "title": "Take-home Exercise 1",
    "section": "1. Load the respopagesextod2022.csv into Tableau Prep Builders. Click the check box of ‘Use Data Interpreter’.",
    "text": "1. Load the respopagesextod2022.csv into Tableau Prep Builders. Click the check box of ‘Use Data Interpreter’."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#scan-through-the-data-details-and-change-the-time-from-data-type-number-to-date.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#scan-through-the-data-details-and-change-the-time-from-data-type-number-to-date.",
    "title": "Take-home Exercise 1",
    "section": "2. Scan through the data details and change the “Time” from data type “number” to “date”.",
    "text": "2. Scan through the data details and change the “Time” from data type “number” to “date”."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#create-rows-and-columns-for-33-pyramid.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#create-rows-and-columns-for-33-pyramid.",
    "title": "Take-home Exercise 1",
    "section": "3. Create rows and columns for 3*3 pyramid.",
    "text": "3. Create rows and columns for 3*3 pyramid."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#go-to-the-sheet1-click-the-sex-add-on-calculation-field-for-male-population-and-female-population.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#go-to-the-sheet1-click-the-sex-add-on-calculation-field-for-male-population-and-female-population.",
    "title": "Take-home Exercise 1",
    "section": "4. Go to the sheet1, click the “Sex”, add on calculation field for Male Population and Female Population.",
    "text": "4. Go to the sheet1, click the “Sex”, add on calculation field for Male Population and Female Population."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#group-ages-shown-in-the-following.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#group-ages-shown-in-the-following.",
    "title": "Take-home Exercise 1",
    "section": "5. Group “ages” shown in the following.",
    "text": "5. Group “ages” shown in the following."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#drag-the-data-fields-into-the-columns-and-rows-as-following.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#drag-the-data-fields-into-the-columns-and-rows-as-following.",
    "title": "Take-home Exercise 1",
    "section": "6. Drag the data fields into the columns and rows as following.",
    "text": "6. Drag the data fields into the columns and rows as following."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#change",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#change",
    "title": "Take-home Exercise 1",
    "section": "7. Change",
    "text": "7. Change"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#filter-the-pa-select-the-top-9-planning-areas-which-have-most-the-population.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#filter-the-pa-select-the-top-9-planning-areas-which-have-most-the-population.",
    "title": "Take-home Exercise 1",
    "section": "8. Filter the PA, select the top 9 planning areas which have most the population.",
    "text": "8. Filter the PA, select the top 9 planning areas which have most the population."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#put-the-pa-into-the-details-under-marksall.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#put-the-pa-into-the-details-under-marksall.",
    "title": "Take-home Exercise 1",
    "section": "9. Put the PA into the details under Marks/All.",
    "text": "9. Put the PA into the details under Marks/All."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#change-the-chart-to-a-pyramid-view-by-editing-the-axis-for-the-female-population-field.-right-click-on-the-axis-for-female-population-field-and-select-edit-axis.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#change-the-chart-to-a-pyramid-view-by-editing-the-axis-for-the-female-population-field.-right-click-on-the-axis-for-female-population-field-and-select-edit-axis.",
    "title": "Take-home Exercise 1",
    "section": "10. Change the chart to a pyramid view by editing the axis for the Female Population field. Right click on the axis for Female Population field and select “Edit Axis”.",
    "text": "10. Change the chart to a pyramid view by editing the axis for the Female Population field. Right click on the axis for Female Population field and select “Edit Axis”.\n ## In the popped up window, under the section “Scale”, tick the check-box for “Reversed” to reverse the axis for the Female Population field."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#change-the-female-bar-color-from-blue-to-red.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#change-the-female-bar-color-from-blue-to-red.",
    "title": "Take-home Exercise 1",
    "section": "10. Change the Female bar color from blue to red.",
    "text": "10. Change the Female bar color from blue to red."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#sort-descending-for-the-age-group.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#sort-descending-for-the-age-group.",
    "title": "Take-home Exercise 1",
    "section": "11. Sort descending for the age group.",
    "text": "11. Sort descending for the age group."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#remove-index-of-rows-by-click-the-show-header-to-make-the-chart-bigger-for-viewing.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#remove-index-of-rows-by-click-the-show-header-to-make-the-chart-bigger-for-viewing.",
    "title": "Take-home Exercise 1",
    "section": "12. Remove index of rows by click the “show header” to make the chart bigger for viewing.",
    "text": "12. Remove index of rows by click the “show header” to make the chart bigger for viewing."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#proper-labeling.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#proper-labeling.",
    "title": "Take-home Exercise 1",
    "section": "13. Proper labeling.",
    "text": "13. Proper labeling."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#drag-the-pa-into-the-label-under-marksall.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#drag-the-pa-into-the-label-under-marksall.",
    "title": "Take-home Exercise 1",
    "section": "Drag the PA into the label under Marks/All.",
    "text": "Drag the PA into the label under Marks/All."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#select-the-following-settings-for-sumfemale-population.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#select-the-following-settings-for-sumfemale-population.",
    "title": "Take-home Exercise 1",
    "section": "Select the following settings for SUM(Female Population).",
    "text": "Select the following settings for SUM(Female Population)."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#drag-the-female-population-to-the-label-under-female-population-drag-the-male-population-to-the-label-under-male-population.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#drag-the-female-population-to-the-label-under-female-population-drag-the-male-population-to-the-label-under-male-population.",
    "title": "Take-home Exercise 1",
    "section": "Drag the Female Population to the label under Female Population, drag the Male Population to the label under Male Population.",
    "text": "Drag the Female Population to the label under Female Population, drag the Male Population to the label under Male Population."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#click-the-label-under-the-female-population-and-select-the-following-setting-do-the-same-thing-for-male-population.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#click-the-label-under-the-female-population-and-select-the-following-setting-do-the-same-thing-for-male-population.",
    "title": "Take-home Exercise 1",
    "section": "Click the label under the Female Population and select the following setting, do the same thing for Male Population.",
    "text": "Click the label under the Female Population and select the following setting, do the same thing for Male Population."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#format-the-numbers-of-sumfemale-population-from-automatic-to-numbercustomthousandsk-decimal-is-0.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#format-the-numbers-of-sumfemale-population-from-automatic-to-numbercustomthousandsk-decimal-is-0.",
    "title": "Take-home Exercise 1",
    "section": "14. Format the numbers of SUM(Female Population) from automatic to Number(custom)–Thousands(K), decimal is “0”.",
    "text": "14. Format the numbers of SUM(Female Population) from automatic to Number(custom)–Thousands(K), decimal is “0”."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#do-the-same-thing-for-male-population.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#do-the-same-thing-for-male-population.",
    "title": "Take-home Exercise 1",
    "section": "Do the same thing for Male population.",
    "text": "Do the same thing for Male population."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#change-the-name-of-sheet1-to-demographic-structure-of-singapore-at-top-9-population-planning-area-in-june-2022.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#change-the-name-of-sheet1-to-demographic-structure-of-singapore-at-top-9-population-planning-area-in-june-2022.",
    "title": "Take-home Exercise 1",
    "section": "15. Change the name of sheet1 to “Demographic structure of Singapore at top 9 population planning area in June 2022”.",
    "text": "15. Change the name of sheet1 to “Demographic structure of Singapore at top 9 population planning area in June 2022”."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#create-dashboard.-click-the-new-dashboard.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#create-dashboard.-click-the-new-dashboard.",
    "title": "Take-home Exercise 1",
    "section": "16. Create dashboard. Click the New Dashboard.",
    "text": "16. Create dashboard. Click the New Dashboard."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#drag-the-sheet-into-the-right-drop-sheets-here.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#drag-the-sheet-into-the-right-drop-sheets-here.",
    "title": "Take-home Exercise 1",
    "section": "drag the sheet into the right “drop sheets here”.",
    "text": "drag the sheet into the right “drop sheets here”."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#change-the-dashboard-name-to-demographic-structure-of-singapore-at-top-9-population-planning-area-in-june-2022.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#change-the-dashboard-name-to-demographic-structure-of-singapore-at-top-9-population-planning-area-in-june-2022.",
    "title": "Take-home Exercise 1",
    "section": "Change the dashboard name to “Demographic structure of Singapore at top 9 population planning area in June 2022”.",
    "text": "Change the dashboard name to “Demographic structure of Singapore at top 9 population planning area in June 2022”."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#save-the-file-to-take-home-exercise-1.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#save-the-file-to-take-home-exercise-1.",
    "title": "Take-home Exercise 1",
    "section": "17. Save the file to Take-home Exercise 1.",
    "text": "17. Save the file to Take-home Exercise 1."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#extract-data.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#extract-data.",
    "title": "Take-home Exercise 1",
    "section": "18. Extract data.",
    "text": "18. Extract data."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#publish-the-dashboard-to-httpspublic.tableau.comapp",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#publish-the-dashboard-to-httpspublic.tableau.comapp",
    "title": "Take-home Exercise 1",
    "section": "19. Publish the dashboard to https://public.tableau.com/app/",
    "text": "19. Publish the dashboard to https://public.tableau.com/app/"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#in-general-among-the-resident-population-female-population-is-slightly-larger-than-the-male-population-in-the-top-9-population-planning-areas.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#in-general-among-the-resident-population-female-population-is-slightly-larger-than-the-male-population-in-the-top-9-population-planning-areas.",
    "title": "Take-home Exercise 1",
    "section": "In general, among the resident population, Female Population is slightly larger than the Male Population in the top 9 population planning areas.",
    "text": "In general, among the resident population, Female Population is slightly larger than the Male Population in the top 9 population planning areas."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#overall-the-age-groups-of-20-to-29-30-to-39-40-to-49-50-to-59-60-to-69-contributes-the-main-distribution-of-population-of-females-and-males-in-those-planning-areas-except-punggol-and-sengkang.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#overall-the-age-groups-of-20-to-29-30-to-39-40-to-49-50-to-59-60-to-69-contributes-the-main-distribution-of-population-of-females-and-males-in-those-planning-areas-except-punggol-and-sengkang.",
    "title": "Take-home Exercise 1",
    "section": "Overall, the age groups of 20 to 29, 30 to 39, 40 to 49, 50 to 59, 60 to 69 contributes the main distribution of population of females and males in those planning areas except Punggol and Sengkang.",
    "text": "Overall, the age groups of 20 to 29, 30 to 39, 40 to 49, 50 to 59, 60 to 69 contributes the main distribution of population of females and males in those planning areas except Punggol and Sengkang."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#in-the-9-planning-areas-in-punggol-and-sengkang-planning-areas-residents-aged-30-to-39-40-to-49-has-significant-larger-population-compared-to-other-age-groups.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#in-the-9-planning-areas-in-punggol-and-sengkang-planning-areas-residents-aged-30-to-39-40-to-49-has-significant-larger-population-compared-to-other-age-groups.",
    "title": "Take-home Exercise 1",
    "section": "In the 9 planning areas, in Punggol and Sengkang planning areas, residents aged 30 to 39, 40 to 49 has significant larger population compared to other age groups.",
    "text": "In the 9 planning areas, in Punggol and Sengkang planning areas, residents aged 30 to 39, 40 to 49 has significant larger population compared to other age groups."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#in-woodlands-and-choa-chu-kang-planning-area-age-groups-of-20-to-29-and-50-to-59-have-obviously-larger-population-compared-to-other-age-groups.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#in-woodlands-and-choa-chu-kang-planning-area-age-groups-of-20-to-29-and-50-to-59-have-obviously-larger-population-compared-to-other-age-groups.",
    "title": "Take-home Exercise 1",
    "section": "In woodlands and Choa Chu Kang planning area, age groups of 20 to 29 and 50 to 59 have obviously larger population compared to other age groups.",
    "text": "In woodlands and Choa Chu Kang planning area, age groups of 20 to 29 and 50 to 59 have obviously larger population compared to other age groups."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#in-bedok-tampines-yishun-from-the-pyramid-shape-we-can-notice-that-population-aged-groups-are-larger-than-younger-generation-.",
    "href": "Take-home Exercise/Take-home Exercise 1/Take-home Exercise 1.html#in-bedok-tampines-yishun-from-the-pyramid-shape-we-can-notice-that-population-aged-groups-are-larger-than-younger-generation-.",
    "title": "Take-home Exercise 1",
    "section": "In Bedok, Tampines, Yishun, from the pyramid shape, we can notice that population aged groups are larger than younger generation .",
    "text": "In Bedok, Tampines, Yishun, from the pyramid shape, we can notice that population aged groups are larger than younger generation ."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html",
    "href": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "The task Take-home Exercise 2 is to select one of the Take-home Exercise 1 prepared by our classmate, critic the submission in terms of clarity and aesthetics,prepare a sketch for the alternative design by using the data visualisation design principles and best practices we had learned in Lesson 1 and 2, and remake the original design by using ggplot2, ggplot2 extensions and tidyverse packages."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#original-design",
    "href": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#original-design",
    "title": "Take-home Exercise 2",
    "section": "4.1 Original design",
    "text": "4.1 Original design\nThe following is the age-sex pyramid provided by my classmate in this take-home exercise 1 and it will be reviewed and remade in terms of clarity and aesthetics."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#clarity",
    "href": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#clarity",
    "title": "Take-home Exercise 2",
    "section": "4.2 Clarity",
    "text": "4.2 Clarity\n\n4.2.1 Graphical Integrity: Show Me the Truth\nThe better way for define the age group segmentation should be 0-4, 5-9, etc, and not “children”,“early working age”, etc. The reason is “children”,“early working age”, etc is too general, it will mask out age segmentatio signal.\n\n\n4.2.2 Visualising the Right Data\nAbsolute values will reveal more interesting patterns than the derived values. From the derived values which is population in percentage, we will not know what is the number of female and male population difference from the 9 most populated planning areas.\n\n\n4.2.3 Reference line\nIn the remake, the reference line is added which is the avg population (sum of total population divided by 9 planning areas/19 age groups/2 genders).\n\n\n4.2.4 interactive function\nAdd on interactive function into the chart to show the population numbers when move cursor."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#aesthetics",
    "href": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#aesthetics",
    "title": "Take-home Exercise 2",
    "section": "4.3 Aesthetics",
    "text": "4.3 Aesthetics\n\n4.3.1 Application of pre-attentive principle\nColours. The original age-sex pyramid used one color for two genders. However, this display does not show a clear comparison betewwn male and female population. It does not help user to distinguish the genders from the 1st attention. . It’s suggested to choose two different colors to indicate the two different genders in this visualization.\n\n\n4.3.2 X-Axis Title & Labels\nThe population number is large. It’s good to show number in the unit of thousand With the aid of the newly added x-axis title and labels, it makes it easier for users to read and interpret this visualization. The X-axis labels will be converted to positive values because population should be positive values.\n\n\n4.3.3 Caption\nThe caption to mention the data source for this visualization has also been included at the bottom in a clean manner."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#calculate-total-population-count-by-planning-area",
    "href": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#calculate-total-population-count-by-planning-area",
    "title": "Take-home Exercise 2",
    "section": "Calculate total population count by planning area",
    "text": "Calculate total population count by planning area\n\npop_pa <- population %>%\n  select(PA,AG,Sex,Pop) %>%\n  group_by(PA) %>%\n  summarise(totalPop = sum(Pop))"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#sort-planning-areas-by-population",
    "href": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#sort-planning-areas-by-population",
    "title": "Take-home Exercise 2",
    "section": "Sort planning areas by population",
    "text": "Sort planning areas by population\n\npop_sorted <- pop_pa[order(pop_pa$totalPop, decreasing = TRUE), ]"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#select-top-9-planning-areas-by-population",
    "href": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#select-top-9-planning-areas-by-population",
    "title": "Take-home Exercise 2",
    "section": "Select top 9 planning areas by population",
    "text": "Select top 9 planning areas by population\n\npop_filtered <- head(pop_sorted, 9)"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#filter-the-raw-dataset-according-to-the-top-9-planning-areas-by-population",
    "href": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#filter-the-raw-dataset-according-to-the-top-9-planning-areas-by-population",
    "title": "Take-home Exercise 2",
    "section": "Filter the raw dataset according to the top 9 planning areas by population",
    "text": "Filter the raw dataset according to the top 9 planning areas by population\n\npop_pa_filtered <- population %>%\n  filter(PA %in% pop_filtered$PA)"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#aggregate-data-by-planning-areas-age-group-and-sex",
    "href": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#aggregate-data-by-planning-areas-age-group-and-sex",
    "title": "Take-home Exercise 2",
    "section": "aggregate data by planning areas, age group and sex",
    "text": "aggregate data by planning areas, age group and sex\n\nPop_pa_age_sex <- aggregate(Pop ~ PA + AG + Sex, data = pop_pa_filtered, FUN = sum)"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#sort-dataset-by-top-9-planning-areas-and-age-group",
    "href": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#sort-dataset-by-top-9-planning-areas-and-age-group",
    "title": "Take-home Exercise 2",
    "section": "Sort dataset by top 9 planning areas and age group",
    "text": "Sort dataset by top 9 planning areas and age group\nverify the age groups\n\nfreq(data=Pop_pa_age_sex , \n     input = 'AG')\n\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\nℹ The deprecated feature was likely used in the funModeling package.\n  Please report the issue at <https://github.com/pablo14/funModeling/issues>.\n\n\n\n\n\n            AG frequency percentage cumulative_perc\n1       0_to_4        18       5.26            5.26\n2     10_to_14        18       5.26           10.52\n3     15_to_19        18       5.26           15.78\n4     20_to_24        18       5.26           21.04\n5     25_to_29        18       5.26           26.30\n6     30_to_34        18       5.26           31.56\n7     35_to_39        18       5.26           36.82\n8     40_to_44        18       5.26           42.08\n9     45_to_49        18       5.26           47.34\n10      5_to_9        18       5.26           52.60\n11    50_to_54        18       5.26           57.86\n12    55_to_59        18       5.26           63.12\n13    60_to_64        18       5.26           68.38\n14    65_to_69        18       5.26           73.64\n15    70_to_74        18       5.26           78.90\n16    75_to_79        18       5.26           84.16\n17    80_to_84        18       5.26           89.42\n18    85_to_89        18       5.26           94.68\n19 90_and_over        18       5.26          100.00"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#order-the-age-groups",
    "href": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#order-the-age-groups",
    "title": "Take-home Exercise 2",
    "section": "order the age groups",
    "text": "order the age groups\n\nPop_pa_age_sex$AG[which(Pop_pa_age_sex$AG==\"0_to_4\")] <-\"00_to_04\"\nPop_pa_age_sex$AG[which(Pop_pa_age_sex$AG==\"5_to_9\")] <-\"05_to_09\""
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#derived-the-population-in-thousand-and-avg-population-in-thousand",
    "href": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#derived-the-population-in-thousand-and-avg-population-in-thousand",
    "title": "Take-home Exercise 2",
    "section": "Derived the population in thousand and avg population in thousand",
    "text": "Derived the population in thousand and avg population in thousand\n\npop_final <- Pop_pa_age_sex %>%\n\n  mutate(Pop_2=round(Pop/1000,2))%>%\n  mutate(Avg=round(sum(Pop)/1000/9/19/2,2))%>%\n  arrange(PA, AG)"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#create-the-age_sex_pyramid",
    "href": "Take-home Exercise/Take-home Exercise 2/Take-home Exercise 2.html#create-the-age_sex_pyramid",
    "title": "Take-home Exercise 2",
    "section": "Create the age_sex_pyramid",
    "text": "Create the age_sex_pyramid\n\nage_sex_pyramid <- ggplot(data=pop_final,aes(x=AG,fill=Sex)) +\n  theme_bw() + ## change background color to white\n  geom_bar(data=subset(pop_final,Sex==\"Females\"),stat='identity',aes(y=Pop_2)) +\n  geom_bar(data=subset(pop_final,Sex==\"Males\"),stat='identity',aes(y=Pop_2*(-1)))  + \n  scale_y_continuous(breaks=seq(-20,20,5),labels=abs(seq(-20,20,5))) +\n  facet_wrap(~ PA)+\n  coord_flip()+\n  theme_bw() +\n  scale_fill_manual(values = c(\"Males\" = \"blue\", \n                               \"Females\" = \"red\")) +\n\n\n  labs(x = \"Age Group\", \n       y = \"Population(in thousand)\",\n       title = \"Singapore Population Pyramid by age&sex from top 9 Planning Areas in June 2022\",  \n       subtitle = \"Top 9 Planning Areas by Population, 2022\",\n       caption = \"Data Source: https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data\")+\n\n    theme(plot.title = element_text(hjust=0.5, size=14),\n          plot.subtitle = element_text(hjust = 0.5,size = 8),\n          legend.title = element_text(size=10),\n          legend.text = element_text(size=8),\n          axis.text = element_text(face=\"bold\"),\n          axis.ticks.x=element_blank(),\n          axis.text.x = element_text(angle = 0),\n          axis.title.y=element_text(angle=0))\n\nage_sex_pyramid_final <-age_sex_pyramid + geom_hline(yintercept = pop_final$Avg,linetype=\"dotted\", color = \"black\") + geom_hline(yintercept = -(pop_final$Avg),linetype=\"dotted\", color = \"black\")+\n\n  geom_text(aes(0,Avg,label = 'Avg', vjust = -1))+\n  geom_text(aes(0,-Avg,label = 'Avg', vjust = -1)) \n\nggplotly(age_sex_pyramid_final)"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html",
    "href": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "In this take-home exercise, we are required to uncover the salient patterns of the resale prices of public housing property by residential towns and estates in Singapore by using appropriate analytical visualisation techniques learned in Lesson 4: Fundamentals of Visual Analytics. Students are encouraged to apply appropriate interactive techniques to enhance user and data discovery experiences.\nFor the purpose of this study, the focus should be on 3-ROOM, 4-ROOM and 5-ROOM types. You can choose to focus on either one housing type or multiple housing types. The study period should be on 2022."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#packages-used",
    "href": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#packages-used",
    "title": "Take-home Exercise 3",
    "section": "3.1 Packages used",
    "text": "3.1 Packages used\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\n\nShow the code\npacman::p_load(ggstatsplot, ggthemes, plotly, corrplot, lubridate, ggpubr, plotly, gganimate, viridis, ggridges, ggrepel, testthat, hmisc, tidyverse, funModeling, PMCMRplus, gifski, ggplot2,treemap )"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#importing-data",
    "href": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#importing-data",
    "title": "Take-home Exercise 3",
    "section": "4.1 Importing Data",
    "text": "4.1 Importing Data\n\n\nShow the code\nresale_prices <- read_csv(\"data/aspatial/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv\")"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#data-wrangling",
    "href": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#data-wrangling",
    "title": "Take-home Exercise 3",
    "section": "4.2 Data Wrangling",
    "text": "4.2 Data Wrangling\n\n4.2.1 Get summary of the data\n\n\nShow the code\nsummary(resale_prices)\n\n\n    month               town            flat_type            block          \n Length:146872      Length:146872      Length:146872      Length:146872     \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n street_name        storey_range       floor_area_sqm   flat_model       \n Length:146872      Length:146872      Min.   : 31.0   Length:146872     \n Class :character   Class :character   1st Qu.: 82.0   Class :character  \n Mode  :character   Mode  :character   Median : 94.0   Mode  :character  \n                                       Mean   : 97.6                     \n                                       3rd Qu.:113.0                     \n                                       Max.   :249.0                     \n lease_commence_date remaining_lease     resale_price    \n Min.   :1966        Length:146872      Min.   : 140000  \n 1st Qu.:1985        Class :character   1st Qu.: 358000  \n Median :1996        Mode  :character   Median : 448000  \n Mean   :1996                           Mean   : 478316  \n 3rd Qu.:2007                           3rd Qu.: 565800  \n Max.   :2019                           Max.   :1418000  \n\n\n\n\n4.2.2 Check if any missing values\n\n\nShow the code\nskimr::skim(resale_prices)\n\n\n\nData summary\n\n\nName\nresale_prices\n\n\nNumber of rows\n146872\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n8\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmonth\n0\n1\n7\n7\n0\n74\n0\n\n\ntown\n0\n1\n5\n15\n0\n26\n0\n\n\nflat_type\n0\n1\n6\n16\n0\n7\n0\n\n\nblock\n0\n1\n1\n4\n0\n2654\n0\n\n\nstreet_name\n0\n1\n7\n20\n0\n564\n0\n\n\nstorey_range\n0\n1\n8\n8\n0\n17\n0\n\n\nflat_model\n0\n1\n4\n22\n0\n21\n0\n\n\nremaining_lease\n0\n1\n8\n18\n0\n659\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nfloor_area_sqm\n0\n1\n97.60\n24.09\n31\n82\n94\n113\n249\n▃▇▃▁▁\n\n\nlease_commence_date\n0\n1\n1995.52\n13.73\n1966\n1985\n1996\n2007\n2019\n▂▇▅▆▇\n\n\nresale_price\n0\n1\n478315.95\n165533.82\n140000\n358000\n448000\n565800\n1418000\n▆▇▂▁▁\n\n\n\n\n\n\n\n4.2.3 EDA\ntown\n\n\nShow the code\nfreq(data=resale_prices, \n     input = 'town')\n\n\nflat_type\n\n\nShow the code\nfreq(data=resale_prices, \n     input = 'flat_type')\n\n\nstorey_range\n\n\nShow the code\nfreq(data=resale_prices, \n     input = 'storey_range')\n\n\nfloor_area_sqm\n\n\nShow the code\nfreq(data=resale_prices, \n     input = 'floor_area_sqm')\n\n\nlease_commence_date\n\n\nShow the code\nfreq(data=resale_prices, \n     input = 'lease_commence_date')\n\n\n\n\nShow the code\nunique(resale_prices$remaining_lease)\n\n\nresale_price\n\n\nShow the code\ngghistostats(\n  data = resale_prices,\n  x = resale_price,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"Resale price\"\n) +\n  theme_minimal()\n\n\n\n\n4.2.4 Derive new variables\nSeparate the years and months.\n\n\nShow the code\nresale_prices_1 <- resale_prices %>% \n  separate(month, c(\"Year\", \"Month\"), sep = \"-\")\n\n\nConvert string to integer.\n\n\nShow the code\nresale_prices_1$Year <- strtoi(resale_prices_1$Year)\nresale_prices_1$Month <- strtoi(resale_prices_1$Month)\n\n\nconvert reaming_lease to reaming_lease_year.\n\n\nShow the code\nresale_prices_2 <- bind_cols(resale_prices_1,\n                              (str_split_fixed(resale_prices_1$remaining_lease, \n                                           \" \", \n                                           4) %>% \n                             data.frame() %>% \n                             rename(year_lease = X1, \n                                    omit1 = X2, \n                                    month_lease = X3, \n                                    omit2 = X4) %>%\n                             select (-c(omit1, omit2)) %>%\n                             mutate(month_lease = \n                                      ifelse(month_lease == \"\", 0, \n                                             month_lease)) %>% \n                             mutate_if(is.character, as.numeric))\n                          ) %>%\n  mutate (remaining_lease_years = round(year_lease + month_lease/12,2))\n\n\nderive new variables price_psm,price_thousand,property_age.\n\n\nShow the code\nresale_prices_3 <- resale_prices_2 %>%\n  mutate(price_psm = round(resale_price / floor_area_sqm)) %>%\n  mutate(price_thousand = round(resale_price / 1000)) \n\n\nFilter by year 2022\n\n\nShow the code\nresale_prices_2022 <- resale_prices_3 %>%\n  filter(Year == \"2022\", flat_type %in% c(\"3 ROOM\", \"4 ROOM\", \"5 ROOM\"))\n\n\n\n\n4.2.5 Rview output\n\n\nShow the code\nunique(resale_prices_2022$Year)\n\n\n[1] 2022\n\n\nShow the code\nunique(resale_prices_2022$flat_type)\n\n\n[1] \"3 ROOM\" \"4 ROOM\" \"5 ROOM\"\n\n\n\n\nShow the code\nsummary(resale_prices_2022)\n\n\n      Year          Month            town            flat_type        \n Min.   :2022   Min.   : 1.000   Length:24372       Length:24372      \n 1st Qu.:2022   1st Qu.: 3.000   Class :character   Class :character  \n Median :2022   Median : 5.000   Mode  :character   Mode  :character  \n Mean   :2022   Mean   : 6.047                                        \n 3rd Qu.:2022   3rd Qu.:10.000                                        \n Max.   :2022   Max.   :12.000                                        \n                NA's   :4450                                          \n    block           street_name        storey_range       floor_area_sqm  \n Length:24372       Length:24372       Length:24372       Min.   : 51.00  \n Class :character   Class :character   Class :character   1st Qu.: 81.00  \n Mode  :character   Mode  :character   Mode  :character   Median : 93.00  \n                                                          Mean   : 94.08  \n                                                          3rd Qu.:110.00  \n                                                          Max.   :159.00  \n                                                                          \n  flat_model        lease_commence_date remaining_lease     resale_price    \n Length:24372       Min.   :1967        Length:24372       Min.   : 200000  \n Class :character   1st Qu.:1985        Class :character   1st Qu.: 428000  \n Mode  :character   Median :1998        Mode  :character   Median : 515000  \n                    Mean   :1997                           Mean   : 536394  \n                    3rd Qu.:2014                           3rd Qu.: 610000  \n                    Max.   :2019                           Max.   :1418000  \n                                                                            \n   year_lease     month_lease     remaining_lease_years   price_psm    \n Min.   :43.00   Min.   : 0.000   Min.   :43.08         Min.   : 3333  \n 1st Qu.:61.00   1st Qu.: 3.000   1st Qu.:61.75         1st Qu.: 4838  \n Median :74.00   Median : 6.000   Median :74.58         Median : 5368  \n Mean   :74.06   Mean   : 5.557   Mean   :74.52         Mean   : 5736  \n 3rd Qu.:91.00   3rd Qu.: 9.000   3rd Qu.:91.42         3rd Qu.: 6176  \n Max.   :96.00   Max.   :11.000   Max.   :96.42         Max.   :14731  \n                                                                       \n price_thousand  \n Min.   : 200.0  \n 1st Qu.: 428.0  \n Median : 515.0  \n Mean   : 536.4  \n 3rd Qu.: 610.0  \n Max.   :1418.0"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#correlation-analysis",
    "href": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#correlation-analysis",
    "title": "Take-home Exercise 3",
    "section": "5.1 Correlation analysis",
    "text": "5.1 Correlation analysis\n\n\nShow the code\nresale_prices_2022_cor <- resale_prices_2022%>%\n  select (1:2, 8, 10, 15:17)\n\n\n\n\nShow the code\ncluster_vars.cor = cor(resale_prices_2022_cor[,3:6])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\nThere is no strong correlation amongst the above variables."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#normality-analysis",
    "href": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#normality-analysis",
    "title": "Take-home Exercise 3",
    "section": "5.2 Normality analysis",
    "text": "5.2 Normality analysis\n\n5.2.1 Overall check Prices by flat_type\n\n\nShow the code\nset.seed(1234)\n\nresale_prices_2022_3room <- resale_prices_2022 %>%\n  filter(flat_type == \"3 ROOM\")\nresale_prices_2022_4room <- resale_prices_2022 %>%\n  filter(flat_type == \"4 ROOM\")\nresale_prices_2022_5room <- resale_prices_2022 %>%\n  filter(flat_type == \"5 ROOM\")\n\np1 <- gghistostats(\n  data = resale_prices_2022_3room,\n  x = price_thousand,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"3 room Price in Thousands\") +\n  \n  theme_minimal() \n        \np2 <- gghistostats(\n  data = resale_prices_2022_4room,\n  x = price_thousand,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"4 room Price in Thousands\") +\n  \n  theme_minimal() \n\np3 <- gghistostats(\n  data = resale_prices_2022_5room,\n  x = price_thousand,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"5 room Price in Thousands\") +\n  \n  theme_minimal() \nggarrange(p1,p2,p3, ncol = 3, nrow = 1)\n\n\n\n\n\nThe chart shows, overall, 3 Room price mean is about 350k, 4 Room price mean is about 464K, 5 Room price mean is about 555k."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#proportion-and-numbers-of-flat-types-in-singapore",
    "href": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#proportion-and-numbers-of-flat-types-in-singapore",
    "title": "Take-home Exercise 3",
    "section": "5.3 Proportion and numbers of flat types in Singapore",
    "text": "5.3 Proportion and numbers of flat types in Singapore\n\n5.3.1 Derive new varibles\n\n\nShow the code\nflat_type_proportion<- resale_prices_2022 %>% \n  group_by(town, flat_type) %>% \n  summarise(\n  \n    n=n())%>% \n  mutate(pct_flat = round(n/sum(n)*100)) \nhead(flat_type_proportion)\n\n\n# A tibble: 6 × 4\n# Groups:   town [2]\n  town       flat_type     n pct_flat\n  <chr>      <chr>     <int>    <dbl>\n1 ANG MO KIO 3 ROOM      528       53\n2 ANG MO KIO 4 ROOM      305       31\n3 ANG MO KIO 5 ROOM      154       16\n4 BEDOK      3 ROOM      555       44\n5 BEDOK      4 ROOM      462       36\n6 BEDOK      5 ROOM      253       20\n\n\n\n\n5.3.2 Proportion of flat types in Singapore\n\n\nShow the code\nplot_ly(flat_type_proportion, labels = ~flat_type, values = ~pct_flat, type = 'pie') %>% layout(title = 'Pie chart by flat types in Singapore in 2022',\n         xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n         yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\n\n\n\n\n\n\nThe above chart shows, the top 1 proportion flat type is 4 Room, followed by 3 Room and 5 Room.\n\n\n5.3.4 Derive new varibles\n\n\nShow the code\nflat_type_number<- resale_prices_2022 %>% \n  group_by(town, flat_type) %>% \n  summarise(\n  \n    n=n())\n\nhead(flat_type_number)\n\n\n# A tibble: 6 × 3\n# Groups:   town [2]\n  town       flat_type     n\n  <chr>      <chr>     <int>\n1 ANG MO KIO 3 ROOM      528\n2 ANG MO KIO 4 ROOM      305\n3 ANG MO KIO 5 ROOM      154\n4 BEDOK      3 ROOM      555\n5 BEDOK      4 ROOM      462\n6 BEDOK      5 ROOM      253\n\n\n\n\n5.3.5 Numbers of flat types by planning areas in Singapore\n\n\nShow the code\nggplot(flat_type_number,aes(y = reorder(town,n),x = n,fill = flat_type))+\ngeom_bar(stat = 'identity')+\ncoord_cartesian(xlim = c(0,3000))+\nscale_fill_brewer(palette = \"RdBu\")+\nlabs(title = \"Number of flats by flat type and by planning area\",\n       x = \"Number of flats\",\n       y = \"Planning areas in Singapore\",\n       fill = \"flat_type\")\n\n\n\n\n\nFrom the above chart, we can see the top 3 areas which have most flats are SENGKANG, PUNGGOL and YISHUN."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#resale-prices-by-planning-areas",
    "href": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#resale-prices-by-planning-areas",
    "title": "Take-home Exercise 3",
    "section": "5.4 resale prices by planning areas",
    "text": "5.4 resale prices by planning areas\n\n5.4.1 Overview of resale prices by planning areas by months\n\n\nShow the code\nggplot(data = resale_prices_2022, aes(x = price_thousand, y = town, fill = after_stat(x))) +\n  \n  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +\n  \n  theme_minimal() +\n  \n  labs(title = 'Resale Prices by Planning Area in 2022, Month: {frame_time}') +\n  \n  theme(legend.position=\"none\",\n \n  plot.title = element_text(face = \"bold\", size = 12),\n  \n  axis.title.x = element_text(size = 10, hjust = 1),\n  axis.title.y = element_text(size = 10, angle = 360),\n  axis.text = element_text(size = 8)) +\n  \n  scale_fill_viridis(name = \"price_thousand\", option = \"D\") +\n  \n  transition_time(resale_prices_2022$Month) +\n  ease_aes('linear')\n\n\n\n\n\n\n\n5.4.2 Average resale prices by room type by planning areas\nVisualizing the uncertainty of point estimates\n\n\nShow the code\nprices_mean_by_town <- resale_prices_2022 %>% \n  group_by(town) %>% \n  summarise(\n    flat_type,\n    n=n(),\n    mean = round(mean(price_psm)),\n    sd=sd(price_psm))%>%\n \n  mutate(se=sd/sqrt(n-1))\n\n\n\n\nShow the code\nknitr::kable(head(prices_mean_by_town), format = 'html')\n\n\n\n\n \n  \n    town \n    flat_type \n    n \n    mean \n    sd \n    se \n  \n \n\n  \n    ANG MO KIO \n    3 ROOM \n    987 \n    5940 \n    1510.833 \n    48.11473 \n  \n  \n    ANG MO KIO \n    3 ROOM \n    987 \n    5940 \n    1510.833 \n    48.11473 \n  \n  \n    ANG MO KIO \n    3 ROOM \n    987 \n    5940 \n    1510.833 \n    48.11473 \n  \n  \n    ANG MO KIO \n    3 ROOM \n    987 \n    5940 \n    1510.833 \n    48.11473 \n  \n  \n    ANG MO KIO \n    3 ROOM \n    987 \n    5940 \n    1510.833 \n    48.11473 \n  \n  \n    ANG MO KIO \n    3 ROOM \n    987 \n    5940 \n    1510.833 \n    48.11473 \n  \n\n\n\n\n\n\n3 Room4 Room5 Room\n\n\n\n\nShow the code\ntype <- '3 ROOM'\nprices_by_town <- resale_prices_2022 %>% filter(flat_type==type) %>% group_by(town)  \nggplot(prices_by_town, aes(x=reorder(town, price_psm), y=price_psm, color = flat_type)) +\n  geom_boxplot() +\n  labs(title=\"Flat Resale Price (psm) by Town for 3 Room \", \n       x=\"Town\", \n       y=\"Resale Price ($ psm)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size=16, hjust=0.5),\n        axis.title.x = element_text(size=15),\n        axis.text.x = element_text(angle=45, hjust=1),\n        axis.title.y = element_text(size=15))  \n\n\n\n\n\nShow the code\nprices_mean_by_town%>% \n  filter(flat_type==type) \n\n\n# A tibble: 6,345 × 6\n# Groups:   town [26]\n   town       flat_type     n  mean    sd    se\n   <chr>      <chr>     <int> <dbl> <dbl> <dbl>\n 1 ANG MO KIO 3 ROOM      987  5940 1511.  48.1\n 2 ANG MO KIO 3 ROOM      987  5940 1511.  48.1\n 3 ANG MO KIO 3 ROOM      987  5940 1511.  48.1\n 4 ANG MO KIO 3 ROOM      987  5940 1511.  48.1\n 5 ANG MO KIO 3 ROOM      987  5940 1511.  48.1\n 6 ANG MO KIO 3 ROOM      987  5940 1511.  48.1\n 7 ANG MO KIO 3 ROOM      987  5940 1511.  48.1\n 8 ANG MO KIO 3 ROOM      987  5940 1511.  48.1\n 9 ANG MO KIO 3 ROOM      987  5940 1511.  48.1\n10 ANG MO KIO 3 ROOM      987  5940 1511.  48.1\n# … with 6,335 more rows\n\n\nShow the code\nggplot(prices_mean_by_town) +\n  geom_errorbar(\n    aes(x=reorder(town,mean), \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=1.5) +\n  geom_point(aes\n           (x=town, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n\n  theme_classic() +\n  theme(plot.title = element_text(size=16, hjust=0.5),\n        axis.title.x = element_text(size=12),\n        axis.text.x = element_text(angle=60, hjust=1),\n        axis.title.y = element_text(size=12)) + \n  ggtitle(\"Standard error of 3 Room prices_mean_by_town\")\n\n\n\n\n\nShow the code\nggarrange(prices_by_town, prices_mean_by_town,ncol = 1, nrow =2 )\n\n\n\n\n\nThe above charts are showing CENTRAL AREA, QUEENSTOWN and KALANG are the top 3 areas which have the higest mean price with 90% of confidence interval.\n\n\n\n\nShow the code\ntype <- '4 ROOM'\nprices_by_town <- resale_prices_2022 %>% filter(flat_type==type) %>% group_by(town)  \nggplot(prices_by_town, aes(x=reorder(town, price_psm), y=price_psm, color = flat_type)) +\n  geom_boxplot() +\n  labs(title=\"Flat Resale Price (psm) by Town for 4 Room \", \n       x=\"Town\", \n       y=\"Resale Price ($ psm)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size=16, hjust=0.5),\n        axis.title.x = element_text(size=15),\n        axis.text.x = element_text(angle=45, hjust=1),\n        axis.title.y = element_text(size=15))  \n\n\n\n\n\nShow the code\nprices_mean_by_town%>% \n  filter(flat_type==type) \n\n\n# A tibble: 11,311 × 6\n# Groups:   town [26]\n   town       flat_type     n  mean    sd    se\n   <chr>      <chr>     <int> <dbl> <dbl> <dbl>\n 1 ANG MO KIO 4 ROOM      987  5940 1511.  48.1\n 2 ANG MO KIO 4 ROOM      987  5940 1511.  48.1\n 3 ANG MO KIO 4 ROOM      987  5940 1511.  48.1\n 4 ANG MO KIO 4 ROOM      987  5940 1511.  48.1\n 5 ANG MO KIO 4 ROOM      987  5940 1511.  48.1\n 6 ANG MO KIO 4 ROOM      987  5940 1511.  48.1\n 7 ANG MO KIO 4 ROOM      987  5940 1511.  48.1\n 8 ANG MO KIO 4 ROOM      987  5940 1511.  48.1\n 9 ANG MO KIO 4 ROOM      987  5940 1511.  48.1\n10 ANG MO KIO 4 ROOM      987  5940 1511.  48.1\n# … with 11,301 more rows\n\n\nShow the code\nggplot(prices_mean_by_town) +\n  geom_errorbar(\n    aes(x=reorder(town,mean), \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=1.5) +\n  geom_point(aes\n           (x=town, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  theme_classic() +\n  theme(plot.title = element_text(size=16, hjust=0.5),\n        axis.title.x = element_text(size=12),\n        axis.text.x = element_text(angle=60, hjust=1),\n        axis.title.y = element_text(size=12)) + \n  ggtitle(\"Standard error of 4 Room prices_mean_by_town\")\n\n\n\n\n\nShow the code\nggarrange(prices_by_town, prices_mean_by_town,ncol = 1, nrow =2 )\n\n\n\n\n\nThe above charts are showing CENTRAL AREA, QUEENSTOWN and KALANG are the top 3 areas which have the higest mean price with 90% of confidence interval.\n\n\n\n\nShow the code\ntype <- '5 ROOM'\nprices_by_town <- resale_prices_2022 %>% filter(flat_type==type) %>% group_by(town)  \nggplot(prices_by_town, aes(x=reorder(town, price_psm), y=price_psm, color = flat_type)) +\n  geom_boxplot() +\n  labs(title=\"Flat Resale Price (psm) by Town for 5 Room \", \n       x=\"Town\", \n       y=\"Resale Price ($ psm)\") +\n  theme_classic() +\n  theme(plot.title = element_text(size=16, hjust=0.5),\n        axis.title.x = element_text(size=15),\n        axis.text.x = element_text(angle=45, hjust=1),\n        axis.title.y = element_text(size=15))  \n\n\n\n\n\nShow the code\nprices_mean_by_town%>% \n  filter(flat_type==type) \n\n\n# A tibble: 6,716 × 6\n# Groups:   town [26]\n   town       flat_type     n  mean    sd    se\n   <chr>      <chr>     <int> <dbl> <dbl> <dbl>\n 1 ANG MO KIO 5 ROOM      987  5940 1511.  48.1\n 2 ANG MO KIO 5 ROOM      987  5940 1511.  48.1\n 3 ANG MO KIO 5 ROOM      987  5940 1511.  48.1\n 4 ANG MO KIO 5 ROOM      987  5940 1511.  48.1\n 5 ANG MO KIO 5 ROOM      987  5940 1511.  48.1\n 6 ANG MO KIO 5 ROOM      987  5940 1511.  48.1\n 7 ANG MO KIO 5 ROOM      987  5940 1511.  48.1\n 8 ANG MO KIO 5 ROOM      987  5940 1511.  48.1\n 9 ANG MO KIO 5 ROOM      987  5940 1511.  48.1\n10 ANG MO KIO 5 ROOM      987  5940 1511.  48.1\n# … with 6,706 more rows\n\n\nShow the code\nggplot(prices_mean_by_town) +\n  geom_errorbar(\n    aes(x=reorder(town,mean), \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=1.5) +\n  geom_point(aes\n           (x=town, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n\n  theme_classic() +\n  theme(plot.title = element_text(size=16, hjust=0.5),\n        axis.title.x = element_text(size=12),\n        axis.text.x = element_text(angle=60, hjust=1),\n        axis.title.y = element_text(size=12)) + \n  ggtitle(\"Standard error of 5 Room prices_mean_by_town\")\n\n\n\n\n\nShow the code\nggarrange(prices_by_town, prices_mean_by_town,ncol = 1, nrow =2 )\n\n\n\n\n\nThe above charts are showing CENTRAL AREA, QUEENSTOWN and KALANG are the top 3 areas which have the higest mean price with 90% of confidence interval."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#resale-price-by-remaining_lease_year",
    "href": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#resale-price-by-remaining_lease_year",
    "title": "Take-home Exercise 3",
    "section": "5.5 Resale price by remaining_lease_year",
    "text": "5.5 Resale price by remaining_lease_year\n\n3 Room4 Room5 Room\n\n\n\n\nShow the code\ntype <- \"3 ROOM\"\nggscatterstats(\n data = resale_prices_2022 %>% filter(flat_type==type),\nx = remaining_lease_years,\ny = price_thousand,\nmarginal = FALSE)+\n  theme_minimal() +\n  labs(title=paste(\"Correlation of Resale Price and Remaining_lease_years\", lapply(type, tolower), \"flats\"), x=\"Remaining_lease_years\", y=\"Resale Price (in thousand)\", fill=\"Resale Price (in thousand)\")+\ntheme(\n        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        \n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\nThe above chart show the higher remaining lease years, the higher unit price. The coefficient is 0.61 which suggests there is a slight correlation.\n\n\n\n\nShow the code\ntype <- '4 ROOM'\nggscatterstats(\n data = resale_prices_2022 %>% filter(flat_type==type),\nx = remaining_lease_years,\ny = price_thousand,\nmarginal = FALSE) +\n  theme_minimal() +\n  labs(title=paste(\"Correlation of Resale Price and Remaining_lease_years\", lapply(type, tolower), \"flats\"), x=\"Remaining_lease_years\", y=\"Resale Price (in thousand)\", fill=\"Resale Price (in thousand)\")+\ntheme(\n        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        \n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\nThe above chart show the higher remaining lease years, the higher unit price. The coefficient is 0.41 which suggests correlation is not strong.\n\n\n\n\nShow the code\ntype <- '5 ROOM'\nggscatterstats(\n data = resale_prices_2022 %>% filter(flat_type==type),\nx = remaining_lease_years,\ny = price_thousand,\nmarginal = FALSE) +\n  theme_minimal() +\n  labs(title=paste(\"Correlation of Resale Price and Remaining_lease_years\", lapply(type, tolower), \"flats\"), x=\"Remaining_lease_years\", y=\"Resale Price (in thousand)\", fill=\"Resale Price (in thousand)\")+\ntheme(\n        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        \n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\nThe above chart show the higher remaining lease years, the higher unit price. The coefficient is 0.18 which suggests correlation is not strong."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#resale-prices-by-floor_area_sqm",
    "href": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#resale-prices-by-floor_area_sqm",
    "title": "Take-home Exercise 3",
    "section": "5.6 Resale prices by floor_area_sqm",
    "text": "5.6 Resale prices by floor_area_sqm\n\n3 Room4 Room5 Room\n\n\n\n\nShow the code\ntype <- '3 ROOM'\nggscatterstats(\n data = resale_prices_2022 %>% filter(flat_type==type),\nx = floor_area_sqm,\ny = price_thousand,\nmarginal = FALSE) +\n  theme_minimal() +\n  labs(title=paste(\"Correlation of Resale Price and floor_area_sqm\", lapply(type, tolower), \"flats\"), x=\"floor_area_sqm\", y=\"Resale Price (in thousand)\", fill=\"Resale Price (psm)\")+\ntheme(\n        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        \n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\nThe above chart show the higher remaining lease years, the higher unit price. The coefficient is 0.25 which suggests correlation is not strong.\n\n\n\n\nShow the code\ntype <- '4 ROOM'\nggscatterstats(\n data = resale_prices_2022 %>% filter(flat_type==type),\nx = floor_area_sqm,\ny = price_thousand,\nmarginal = FALSE) +\n  theme_minimal() +\n  labs(title=paste(\"Correlation of Resale Price (psm) and floor_area_sqm\", lapply(type, tolower), \"flats\"), x=\"floor_area_sqm\", y=\"Resale Price (in thousand)\", fill=\"Resale Price (in thousand)\")+\ntheme(\n        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        \n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\nThe above chart show the higher remaining lease years, the higher unit price. The coefficient is -0.05 which suggests correlation is not strong.\n\n\n\n\nShow the code\ntype <- '5 ROOM'\nggscatterstats(\n data = resale_prices_2022 %>% filter(flat_type==type),\nx = floor_area_sqm,\ny = price_thousand,\nmarginal = FALSE) +\n  \n  theme_minimal() +\n  \n  labs(title=paste(\"Correlation of Resale Price (psm) and floor_area_sqm\", lapply(type, tolower), \"flats\"), x=\"floor_area_sqm\", y=\"Resale Price ($ psm)\", fill=\"Resale Price (psm)\")+\ntheme(\n        plot.title = element_text(hjust = 0.2, size = 15, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        \n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title = element_text(size = 12, face = \"bold\"))\n\n\n\n\n\nThe above chart show the higher remaining lease years, the higher unit price. The coefficient is 0.02 which suggests correlation is not strong."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#resalse-price-by-timesale-months",
    "href": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#resalse-price-by-timesale-months",
    "title": "Take-home Exercise 3",
    "section": "5.7 resalse price by time(sale months)",
    "text": "5.7 resalse price by time(sale months)\n\n3 Room4 Room5 Room\n\n\n\n\nShow the code\ntype <- '3 ROOM'\nna.omit(resale_prices_2022) %>% \n  filter(flat_type == type) %>% \n  ggplot(aes(x = flat_type, y = price_thousand)) +\n  \n  geom_boxplot(aes(fill = as.factor(Month)), color = \"grey\") +\n  \n  stat_summary(fun = \"mean\", geom = \"point\", color = \"black\") +\n  \n  theme_minimal() +\n  \n  scale_fill_brewer(palette = \"Paired\") +\n\n labs( title = \"Monthly Resale prices by Flat Types\",\n       y = \"Resale price (in thousand)\",\n       x = \"Flat Type\",\n       fill = \"Month\") +theme_classic()+\n\ntheme(\n        plot.title = element_text(hjust = 0.5, size = 12, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        \n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title.x = element_text(hjust = 0.5, size = 12, face = \"bold\"),\n        axis.title.y = element_text(hjust = 0.5, size = 12, face = \"bold\"))\n\n\n\n\n\nThe above chart shows there is no significant increasing or decreasing trend of resale price over months.\n\n\n\n\nShow the code\ntype <- '4 ROOM'\nna.omit(resale_prices_2022) %>% \n  filter(flat_type == type) %>% \n  ggplot(aes(x = flat_type, y = price_thousand)) +\n  \n  geom_boxplot(aes(fill = as.factor(Month)), color = \"grey\") +\n  \n  stat_summary(fun = \"mean\", geom = \"point\", color = \"black\") +\n  \n  theme_minimal() +\n  \n  scale_fill_brewer(palette = \"Paired\") +\n\n labs( title = \"Monthly Resale prices by Flat Types\",\n       y = \"Resale price (in thousand)\",\n       x = \"Flat Type\",\n       fill = \"Month\") +theme_classic()+\n\ntheme(\n        plot.title = element_text(hjust = 0.5, size = 12, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        \n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title.x = element_text(hjust = 0.5, size = 12, face = \"bold\"),\n        axis.title.y = element_text(hjust = 0.5, size = 12, face = \"bold\"))\n\n\n\n\n\nThe above chart shows there is no significant increasing or decreasing trend of resale price over months.\n\n\n\n\nShow the code\ntype <- '5 ROOM'\nna.omit(resale_prices_2022) %>% \n  filter(flat_type == type) %>% \n  ggplot(aes(x = flat_type, y = price_thousand)) +\n  \n  geom_boxplot(aes(fill = as.factor(Month)), color = \"grey\") +\n  \n  stat_summary(fun = \"mean\", geom = \"point\", color = \"black\") +\n  \n  theme_minimal() +\n  \n  scale_fill_brewer(palette = \"Paired\") +\n\n labs( title = \"Monthly Resale prices by Flat Types\",\n       y = \"Resale price (in thousand)\",\n       x = \"Flat Type\",\n       fill = \"Month\") +theme_classic()+\n\ntheme(\n        plot.title = element_text(hjust = 0.5, size = 12, face = 'bold'),\n        plot.margin = margin(20, 20, 20, 20),\n        legend.position = \"bottom\",\n        \n        axis.text = element_text(size = 10, face = \"bold\"),\n        axis.title.x = element_text(hjust = 0.5, size = 12, face = \"bold\"),\n        axis.title.y = element_text(hjust = 0.5, size = 12, face = \"bold\"))\n\n\n\n\n\nThe above chart shows there is no significant increasing or decreasing trend of resale price over months."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#resale-price-by-storey_range",
    "href": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#resale-price-by-storey_range",
    "title": "Take-home Exercise 3",
    "section": "5.7 Resale price by storey_range",
    "text": "5.7 Resale price by storey_range\n\nTreemap\n\n\nShow the code\n#treemap  \n\ntreemap_storey <- treemap (resale_prices_2022,\n        index= c(\"flat_type\", \"town\"),\n        vSize= \"price_thousand\",\n        vColor = \"storey_range\",\n        type=\"categorical\",\n        palette = \"Blues\",\n        title=\"Resale price by storey_range\",\n        title.legend = \"Price_thousand\"\n        )\n\n\n\n\n\nThe above chart shows: For 3 Room flat type, the unit prices are higher at YISHUN, ANG MIAO KIAO, BEDOK, storey ranging from 04-06 to 07-09. For 4 Room flat type, the unit prices are higher at SENGKANG, PUNGGOL, YISHUN, storey ranging from 07-09, 10-12 to 13-15. For 5 Room flat type, the unit prices are higher at SENGKANG, PUNGGOL, JURONG WEST, storey ranging from 07-09, 10-12 to 13-15."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#summary-of-insights",
    "href": "Take-home Exercise/Take-home Exercise 3/Take-home Exercise 3.html#summary-of-insights",
    "title": "Take-home Exercise 3",
    "section": "6.0 Summary of insights",
    "text": "6.0 Summary of insights\nFinding 1 - Geography Overall, the top 1 proportion flat type is 4 Room, followed by 3 Room and 5 Room in Singapore in 2022. When looking at the numbers of flats, we can see that SENGKANG, PUNGGOL and YISHUN have the most of the flats of all flat types.This could be seen in section 5.3 Proportion and absolute numbers of flat types in Singapore.\nLocation had a great effect on flat resale prices. Generally, the CENTRAL AREA had the most expensive flats by mean price per square meter followed by QUEENSTOWN and KALLANG. This could be seen from the box plots and uncertainty of point estimates in section 5.4.2 Average resale prices by room type by planning areas.\nFinding 2 - Resale price and remaining lease year, floor area sqm, Time(months) Generally, there is no strong correlation between the unit price and remaining lease, unit price and floor area sqm. This could be seen in section 5.5 Resale price by remaining_lease_year and 5.6 Resale prices by floor_area_sqm.\nThere is no significant increasing or decreasing trend of resale price over months.This could be seen in section 5.7 resalse price by time(sale months).\nFinding 3 - Resale price by storey_range For 3 Room flat type, the unit prices are higher at YISHUN, ANG MIAO KIAO, BEDOK, storey ranging from 04-06 to 07-09. For 4 Room flat type, the unit prices are higher at SENGKANG, PUNGGOL, YISHUN, storey ranging from 07-09, 10-12 to 13-15. For 5 Room flat type, the unit prices are higher at SENGKANG, PUNGGOL, JURONG WEST, storey ranging from 07-09, 10-12 to 13-15. This could be seen in section 5.7 Resale price by storey_range."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 4/Take-home Exercise 4.html",
    "href": "Take-home Exercise/Take-home Exercise 4/Take-home Exercise 4.html",
    "title": "Take-home Exercise 4",
    "section": "",
    "text": "In this take-home exercise, we are required to uncover the impact of COVID-19 as well as the global economic and political dynamic in 2022 on Singapore bi-lateral trade (i.e. Import, Export and Trade Balance) by using appropriate analytical visualisation techniques learned in Lesson 6: It’s About Time. Students are encouraged to apply appropriate interactive techniques to enhance user and data discovery experiences."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 4/Take-home Exercise 4.html#packages-used",
    "href": "Take-home Exercise/Take-home Exercise 4/Take-home Exercise 4.html#packages-used",
    "title": "Take-home Exercise 4",
    "section": "3.1 Packages used",
    "text": "3.1 Packages used\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\n\nShow the code\npacman::p_load(plotly, ggplot2, timetk, scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse,funModeling)"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 4/Take-home Exercise 4.html#importing-data",
    "href": "Take-home Exercise/Take-home Exercise 4/Take-home Exercise 4.html#importing-data",
    "title": "Take-home Exercise 4",
    "section": "4.1 Importing Data",
    "text": "4.1 Importing Data\n\n\nShow the code\nImport <- read_excel(\"data/outputFile.xlsx\", sheet = \"T1\", skip = 9)\nExport <- read_excel(\"data/outputFile.xlsx\", sheet = \"T2\", skip = 9)"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 4/Take-home Exercise 4.html#data-wrangling",
    "href": "Take-home Exercise/Take-home Exercise 4/Take-home Exercise 4.html#data-wrangling",
    "title": "Take-home Exercise 4",
    "section": "4.2 Data wrangling",
    "text": "4.2 Data wrangling\nselect data from 2020 Jan to 2022 Dec.\n\n\nShow the code\nImport_1 <- Import %>%\n  select(1,3:38)%>%\n  filter(row_number()<92 & row_number()>1)\n\n\n\n\nShow the code\nExport_1 <- Export %>%\n  select(1,3:38.)%>%\n  filter(row_number()<120 & row_number()>1)\n\n\nCheck if any missing values\n\n\nShow the code\nskimr::skim(Import_1)\n\n\n\nData summary\n\n\nName\nImport_1\n\n\nNumber of rows\n90\n\n\nNumber of columns\n37\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n36\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nData Series\n0\n1\n22\n52\n0\n90\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\n2022 Dec\n0\n1\n586243.8\n1368046.9\n0\n6475.38\n48296.50\n307285.0\n7403998\n▇▁▁▁▁\n\n\n2022 Nov\n0\n1\n571033.4\n1301748.3\n0\n6575.65\n47146.00\n323984.0\n6773005\n▇▁▁▁▁\n\n\n2022 Oct\n0\n1\n603702.2\n1400359.3\n0\n7424.25\n63806.50\n360812.2\n7810503\n▇▁▁▁▁\n\n\n2022 Sep\n0\n1\n667836.1\n1489183.4\n0\n10033.75\n57056.00\n384880.0\n7405741\n▇▁▁▁▁\n\n\n2022 Aug\n0\n1\n671755.9\n1505473.5\n0\n9132.50\n51208.50\n455167.2\n7548001\n▇▁▁▁▁\n\n\n2022 Jul\n0\n1\n686508.2\n1515344.2\n0\n9656.75\n58018.00\n445801.0\n7792074\n▇▁▁▁▁\n\n\n2022 Jun\n0\n1\n682164.9\n1581835.2\n0\n8749.75\n69630.00\n408044.5\n7717915\n▇▁▁▁▁\n\n\n2022 May\n0\n1\n639902.7\n1478007.1\n0\n6531.58\n56812.00\n447629.0\n7486002\n▇▁▁▁▁\n\n\n2022 Apr\n0\n1\n642572.5\n1466588.8\n0\n9290.00\n70217.50\n444242.5\n7481265\n▇▁▁▁▁\n\n\n2022 Mar\n0\n1\n680540.6\n1609795.4\n0\n7703.25\n64959.50\n404368.2\n8912350\n▇▁▁▁▁\n\n\n2022 Feb\n0\n1\n546062.8\n1277520.9\n0\n6197.60\n41282.00\n355951.0\n6929035\n▇▁▁▁▁\n\n\n2022 Jan\n0\n1\n590077.8\n1357593.5\n0\n9586.50\n52396.00\n318862.2\n7163479\n▇▁▁▁▁\n\n\n2021 Dec\n0\n1\n635704.1\n1553241.9\n0\n10139.25\n56858.00\n320817.0\n9215862\n▇▁▁▁▁\n\n\n2021 Nov\n0\n1\n608560.5\n1474650.5\n0\n8109.50\n55961.50\n336858.2\n8281345\n▇▁▁▁▁\n\n\n2021 Oct\n0\n1\n578280.1\n1393269.2\n0\n7423.75\n50327.50\n372287.2\n8461516\n▇▁▁▁▁\n\n\n2021 Sep\n0\n1\n561719.2\n1422245.6\n0\n7359.50\n48116.50\n241825.8\n8785105\n▇▁▁▁▁\n\n\n2021 Aug\n0\n1\n562337.3\n1391492.2\n0\n7536.00\n54621.50\n251813.0\n8134968\n▇▁▁▁▁\n\n\n2021 Jul\n0\n1\n536820.2\n1305877.2\n0\n8512.75\n40744.90\n346546.8\n7991895\n▇▁▁▁▁\n\n\n2021 Jun\n0\n1\n535805.9\n1282636.4\n0\n7159.00\n45186.00\n356035.8\n7300460\n▇▁▁▁▁\n\n\n2021 May\n0\n1\n510561.5\n1277424.5\n0\n4913.75\n41337.00\n230461.0\n7161940\n▇▁▁▁▁\n\n\n2021 Apr\n0\n1\n543848.6\n1330817.3\n0\n6076.80\n43846.00\n287915.0\n7838848\n▇▁▁▁▁\n\n\n2021 Mar\n0\n1\n595467.7\n1412024.8\n0\n6628.00\n41011.70\n359609.2\n7470910\n▇▁▁▁▁\n\n\n2021 Feb\n0\n1\n460230.5\n1061792.0\n0\n5578.25\n35105.50\n284150.5\n5518278\n▇▁▁▁▁\n\n\n2021 Jan\n0\n1\n487403.0\n1122842.9\n0\n5970.75\n42248.00\n337218.8\n5693673\n▇▁▁▁▁\n\n\n2020 Dec\n0\n1\n500637.4\n1244183.6\n0\n6825.50\n35537.90\n219175.2\n7090834\n▇▁▁▁▁\n\n\n2020 Nov\n0\n1\n468219.2\n1169362.9\n0\n6485.75\n36915.00\n244342.5\n6852887\n▇▁▁▁▁\n\n\n2020 Oct\n0\n1\n476473.3\n1169379.8\n0\n5673.25\n35167.45\n255064.2\n6992713\n▇▁▁▁▁\n\n\n2020 Sep\n0\n1\n473427.6\n1141417.2\n0\n5206.77\n34522.15\n249263.5\n6561515\n▇▁▁▁▁\n\n\n2020 Aug\n0\n1\n475320.8\n1194167.0\n0\n5240.23\n31650.25\n243462.5\n7970167\n▇▁▁▁▁\n\n\n2020 Jul\n0\n1\n464059.9\n1141729.3\n0\n4713.25\n32678.00\n242386.5\n5935191\n▇▁▁▁▁\n\n\n2020 Jun\n0\n1\n439898.8\n1041629.8\n0\n4884.17\n31531.00\n215720.0\n5603145\n▇▁▁▁▁\n\n\n2020 May\n0\n1\n394076.4\n986818.5\n0\n4120.50\n22439.40\n180320.5\n5080433\n▇▁▁▁▁\n\n\n2020 Apr\n0\n1\n429729.4\n1068014.7\n0\n4385.75\n26420.35\n202348.5\n5439082\n▇▁▁▁▁\n\n\n2020 Mar\n0\n1\n488955.1\n1134882.1\n0\n5154.25\n35816.00\n330576.5\n5823657\n▇▁▁▁▁\n\n\n2020 Feb\n0\n1\n462422.8\n1002846.1\n0\n5214.97\n42334.50\n321633.8\n5116584\n▇▁▁▁▁\n\n\n2020 Jan\n0\n1\n473619.4\n1067404.8\n0\n5695.60\n49916.50\n268527.0\n5091217\n▇▁▁▁▁\n\n\n\n\n\n\n\nShow the code\nskimr::skim(Export_1)\n\n\n\nData summary\n\n\nName\nExport_1\n\n\nNumber of rows\n118\n\n\nNumber of columns\n37\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n36\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nData Series\n0\n1\n22\n53\n0\n118\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\n2022 Dec\n0\n1\n418097.0\n1194617.4\n0\n147.75\n8210.50\n118369.00\n7642587\n▇▁▁▁▁\n\n\n2022 Nov\n0\n1\n423407.0\n1272510.2\n0\n258.75\n8015.70\n120419.50\n8285837\n▇▁▁▁▁\n\n\n2022 Oct\n0\n1\n444276.7\n1284320.0\n0\n171.25\n8924.00\n145353.50\n7377473\n▇▁▁▁▁\n\n\n2022 Sep\n0\n1\n467633.1\n1334807.8\n0\n259.00\n9367.50\n143109.00\n7672003\n▇▁▁▁▁\n\n\n2022 Aug\n0\n1\n489468.8\n1414702.8\n0\n203.25\n9749.00\n160920.00\n8196629\n▇▁▁▁▁\n\n\n2022 Jul\n0\n1\n510922.4\n1446098.1\n0\n427.75\n8572.25\n180595.00\n8510236\n▇▁▁▁▁\n\n\n2022 Jun\n0\n1\n498639.8\n1431575.1\n0\n246.50\n11288.50\n165379.00\n7976196\n▇▁▁▁▁\n\n\n2022 May\n0\n1\n484051.5\n1367418.0\n0\n160.00\n8995.00\n158037.25\n7478079\n▇▁▁▁▁\n\n\n2022 Apr\n0\n1\n468073.3\n1303380.5\n0\n128.75\n8904.00\n139441.00\n6958619\n▇▁▁▁▁\n\n\n2022 Mar\n0\n1\n485301.3\n1388471.4\n0\n140.25\n7754.00\n143188.00\n7882249\n▇▁▁▁▁\n\n\n2022 Feb\n0\n1\n373312.6\n1046659.0\n0\n100.25\n6967.50\n157869.00\n6469836\n▇▁▁▁▁\n\n\n2022 Jan\n0\n1\n417040.6\n1182252.6\n0\n106.75\n9321.50\n136106.75\n6978727\n▇▁▁▁▁\n\n\n2021 Dec\n0\n1\n454829.1\n1310774.4\n0\n193.25\n8350.50\n121241.00\n7876015\n▇▁▁▁▁\n\n\n2021 Nov\n0\n1\n420205.3\n1196997.8\n0\n161.75\n7770.50\n132750.00\n6670871\n▇▁▁▁▁\n\n\n2021 Oct\n0\n1\n398616.9\n1134627.2\n0\n162.75\n6626.90\n153802.75\n6447589\n▇▁▁▁▁\n\n\n2021 Sep\n0\n1\n384251.1\n1112802.3\n0\n104.75\n7500.50\n160929.50\n6184737\n▇▁▁▁▁\n\n\n2021 Aug\n0\n1\n370593.3\n1084077.8\n0\n87.50\n7024.50\n125688.25\n6519894\n▇▁▁▁▁\n\n\n2021 Jul\n0\n1\n384216.1\n1072829.6\n0\n170.00\n7928.00\n136928.75\n6094544\n▇▁▁▁▁\n\n\n2021 Jun\n0\n1\n372826.9\n1046044.3\n0\n55.75\n6234.30\n143808.75\n6198485\n▇▁▁▁▁\n\n\n2021 May\n0\n1\n347202.6\n1004935.6\n0\n134.50\n6421.25\n139041.75\n5932710\n▇▁▁▁▁\n\n\n2021 Apr\n0\n1\n375263.6\n1095326.9\n0\n125.75\n7301.75\n125678.50\n6329544\n▇▁▁▁▁\n\n\n2021 Mar\n0\n1\n393168.7\n1094654.3\n0\n119.50\n8530.50\n126112.75\n6291717\n▇▁▁▁▁\n\n\n2021 Feb\n0\n1\n310132.2\n900528.0\n0\n74.50\n5349.50\n86724.00\n5402465\n▇▁▁▁▁\n\n\n2021 Jan\n0\n1\n325242.2\n976314.0\n0\n87.00\n7120.50\n115283.00\n6121009\n▇▁▁▁▁\n\n\n2020 Dec\n0\n1\n333250.8\n974409.3\n0\n169.75\n7174.00\n130818.50\n6202327\n▇▁▁▁▁\n\n\n2020 Nov\n0\n1\n319340.5\n938043.2\n0\n116.75\n5735.25\n133326.25\n6280686\n▇▁▁▁▁\n\n\n2020 Oct\n0\n1\n317425.3\n925927.0\n0\n80.50\n5345.50\n124435.75\n5249328\n▇▁▁▁▁\n\n\n2020 Sep\n0\n1\n324791.5\n925020.3\n0\n122.50\n7756.00\n93170.50\n5479579\n▇▁▁▁▁\n\n\n2020 Aug\n0\n1\n303788.9\n885364.5\n0\n144.25\n6057.50\n95664.00\n5574117\n▇▁▁▁▁\n\n\n2020 Jul\n0\n1\n316079.8\n906421.6\n0\n171.00\n8152.50\n113675.25\n5539168\n▇▁▁▁▁\n\n\n2020 Jun\n0\n1\n293978.1\n887991.3\n0\n112.00\n4823.45\n93924.50\n5288235\n▇▁▁▁▁\n\n\n2020 May\n0\n1\n262592.9\n773859.1\n0\n39.50\n4444.00\n95021.25\n4843684\n▇▁▁▁▁\n\n\n2020 Apr\n0\n1\n299137.5\n864578.2\n0\n31.00\n5167.05\n95948.75\n5583246\n▇▁▁▁▁\n\n\n2020 Mar\n0\n1\n336379.9\n950555.8\n0\n112.25\n6413.15\n116936.25\n5979894\n▇▁▁▁▁\n\n\n2020 Feb\n0\n1\n325768.8\n860980.8\n0\n132.75\n7261.50\n147114.25\n4985932\n▇▁▁▁▁\n\n\n2020 Jan\n0\n1\n339509.0\n914691.7\n0\n100.25\n6510.35\n122115.50\n5469816\n▇▁▁▁▁\n\n\n\n\n\nSeparate the country and thousand/million\n\n\nShow the code\nImport_2 <- Import_1 %>%\n  separate(`Data Series`, c(\"country\", \"unit\"),\n           sep = ' \\\\(T|\\\\(M') %>%\n  mutate(unit = str_remove(unit, '\\\\)'))\n\n\n\n\nShow the code\nExport_2 <- Export_1 %>%\n  separate(`Data Series`, c(\"country\", \"unit\"),\n           sep = ' \\\\(T|\\\\(M') %>%\n  mutate(unit = str_remove(unit, '\\\\)'))\n\n\nImportK is Import data by thousand/countries.\n\n\nShow the code\nImportK <- Import_2 %>%\n  filter(str_detect(unit, \"housand\")) %>%\n  select(-(unit))\n\n\nImportM is Import data by million/regions.\n\n\nShow the code\nImportM <- Import_2 %>%\n  filter(str_detect(unit, \"illion\")) %>%\n  select(-(unit))\n\n\nExportK is Export data by thousand/countries.\n\n\nShow the code\nExportK<- Export_2 %>%\n  filter(str_detect(unit, \"housand\")) %>%\n  select(-(unit))\n\n\nExportM is Export data by million/regions.\n\n\nShow the code\nExportM<- Export_2 %>%\n  filter(str_detect(unit, \"illion\")) %>%\n  select(-(unit))\n\n\nCreate pivot table to list down the date period in the same column.\n\n\nShow the code\nImportK_pvL <- ImportK %>%\n  pivot_longer(cols = !country,\n               names_to = \"temporary\",\n               values_to = \"import\") %>%\n  mutate(period = (lubridate::ym(temporary))) %>%\n  arrange(country, period)\n\nImportK_pvL <- ImportK_pvL %>%\n  mutate(month = factor(month\n                        (ImportK_pvL$`period`),\n                        levels = 1:12, \n                        labels = month.abb, \n                        ordered = TRUE)) %>%\n  mutate(year = as.character(year(ymd(ImportK_pvL$`period`)))) %>%     \n  relocate(year, month) %>%\n  select(-temporary)%>%\n  arrange(desc(import))\n\n\nCreate pivot table to list down the date period in the same column.\n\n\nShow the code\nImportM_pvL <- ImportM %>%\n  pivot_longer(cols = !country,\n               names_to = \"temporary\",\n               values_to = \"import\") %>%\n  mutate(period = (lubridate::ym(temporary))) %>%\n  arrange(country, period)\n\nImportM_pvL <- ImportM_pvL %>%\n  mutate(month = factor(month\n                        (ImportM_pvL$`period`),\n                        levels = 1:12, \n                        labels = month.abb, \n                        ordered = TRUE)) %>%\n  mutate(year = as.character(year(ymd(ImportM_pvL$`period`)))) %>%     \n  relocate(year, month) %>%\n  select(-temporary)%>%\n  arrange(desc(import))\n\n\nCreate pivot table to list down the date period in the same column.\n\n\nShow the code\nExportK_pvL <- ExportK %>%\n  pivot_longer(cols = !country,\n               names_to = \"temporary\",\n               values_to = \"export\") %>%\n  mutate(period = (lubridate::ym(temporary))) %>%\n  arrange(country, period)\n\nExportK_pvL<- ExportK_pvL %>%\n  mutate(month = factor(month\n                        (ExportK_pvL$`period`),\n                        levels = 1:12, \n                        labels = month.abb, \n                        ordered = TRUE)) %>%\n  mutate(year = as.character(year(ymd(ExportK_pvL$`period`)))) %>%     \n  relocate(year, month) %>%\n  select(-temporary)%>%\n  arrange(desc(export))\n\n\nCreate pivot table to list down the date period in the same column.\n\n\nShow the code\nExportM_pvL <- ExportM %>%\n  pivot_longer(cols = !country,\n               names_to = \"temporary\",\n               values_to = \"export\") %>%\n  mutate(period = (lubridate::ym(temporary))) %>%\n  arrange(country, period)\n\nExportM_pvL<- ExportM_pvL %>%\n  mutate(month = factor(month\n                        (ExportM_pvL$`period`),\n                        levels = 1:12, \n                        labels = month.abb, \n                        ordered = TRUE)) %>%\n  mutate(year = as.character(year(ymd(ExportM_pvL$`period`)))) %>%     \n  relocate(year, month) %>%\n  select(-temporary)%>%\n  arrange(desc(export))\n\n\nMerge import and export by countries.\n\n\nShow the code\nTradeK<- ImportK_pvL %>% \n  full_join(ExportK_pvL)%>%\n  mutate(trade_total = import + export)%>% \n  mutate(formatted_period = format(period, \"%Y %B\"))%>% \n  mutate(trade_balance = export - import)\n\n\nMerge import and export by regions.\n\n\nShow the code\nTradeM<- ImportM_pvL %>% \n  full_join(ExportM_pvL)%>%\n  mutate(trade_total = import + export)%>% \n  mutate(formatted_period = format(period, \"%Y %B\"))%>% \n  mutate(trade_balance = export - import)        \n\n\nBy countries: List “import” and “export” in the same column, name as “Type”, select the column that we need for further analysis, and filter the total trade >10000 million per country.\n\n\nShow the code\nTrade_country<- TradeK %>% \n  pivot_longer(cols = c(\"import\",\"export\"),\n               names_to = \"Type\",\n               values_to = \"Amount\") %>% \n  na.omit(\"Amount\")%>%\n  group_by(country)%>%\n  summarise(year,\n            month,\n            country,\n            trade_country = sum(trade_total/1000),\n            period,\n            formatted_period,\n            Type,\n  \n            Amount = round(Amount/1000)) %>%\n  arrange(desc(trade_country))%>%\n  filter(trade_country > 10000)\n\n\nBy regions: List “import” and “export” in the same column, name as “Type”, select the column that we need for further analysis\n\n\nShow the code\nTrade_region<- TradeM %>% \n  pivot_longer(cols = c(\"import\",\"export\"),\n               names_to = \"Type\",\n               values_to = \"Amount\") %>% \n  na.omit(\"Amount\")%>%\n  group_by(country)%>%\n  summarise(year,\n            month,\n            country,\n            trade_country = sum(trade_total),\n            period,\n            formatted_period,\n            Type,\n            Amount) %>%\n  arrange(desc(trade_country))\n\n\nExamine the final data set.\n\n\nShow the code\nsummary(Trade_country)\n\n\n   country              year               month      trade_country   \n Length:2736        Length:2736        Jan    : 228   Min.   : 11194  \n Class :character   Class :character   Feb    : 228   1st Qu.: 28868  \n Mode  :character   Mode  :character   Mar    : 228   Median : 78635  \n                                       Apr    : 228   Mean   :174271  \n                                       May    : 228   3rd Qu.:161824  \n                                       Jun    : 228   Max.   :950965  \n                                       (Other):1368                   \n     period           formatted_period       Type               Amount    \n Min.   :2020-01-01   Length:2736        Length:2736        Min.   :   0  \n 1st Qu.:2020-09-23   Class :character   Class :character   1st Qu.: 128  \n Median :2021-06-16   Mode  :character   Mode  :character   Median : 457  \n Mean   :2021-06-16                                         Mean   :1210  \n 3rd Qu.:2022-03-08                                         3rd Qu.:1445  \n Max.   :2022-12-01                                         Max.   :9216  \n                                                                          \n\n\nShow the code\nglimpse(Trade_country)\n\n\nRows: 2,736\nColumns: 8\nGroups: country [38]\n$ country          <chr> \"Mainland China\", \"Mainland China\", \"Mainland China\",…\n$ year             <chr> \"2021\", \"2021\", \"2022\", \"2022\", \"2021\", \"2021\", \"2021…\n$ month            <ord> Dec, Dec, Mar, Mar, Sep, Sep, Oct, Oct, Nov, Nov, Aug…\n$ trade_country    <dbl> 950965.3, 950965.3, 950965.3, 950965.3, 950965.3, 950…\n$ period           <date> 2021-12-01, 2021-12-01, 2022-03-01, 2022-03-01, 2021…\n$ formatted_period <chr> \"2021 December\", \"2021 December\", \"2022 March\", \"2022…\n$ Type             <chr> \"import\", \"export\", \"import\", \"export\", \"import\", \"ex…\n$ Amount           <dbl> 9216, 7876, 8912, 6636, 8785, 6017, 8462, 6026, 8281,…\n\n\nShow the code\nsummary(Trade_region)\n\n\n   country              year               month     trade_country    \n Length:432         Length:432         Jan    : 36   Min.   :  95298  \n Class :character   Class :character   Feb    : 36   1st Qu.: 241065  \n Mode  :character   Mode  :character   Mar    : 36   Median : 723092  \n                                       Apr    : 36   Mean   :1266720  \n                                       May    : 36   3rd Qu.: 862475  \n                                       Jun    : 36   Max.   :4955298  \n                                       (Other):216                    \n     period           formatted_period       Type               Amount       \n Min.   :2020-01-01   Length:432         Length:432         Min.   :  238.2  \n 1st Qu.:2020-09-23   Class :character   Class :character   1st Qu.: 1540.2  \n Median :2021-06-16   Mode  :character   Mode  :character   Median : 4680.8  \n Mean   :2021-06-16                                         Mean   : 8796.7  \n 3rd Qu.:2022-03-08                                         3rd Qu.: 6718.9  \n Max.   :2022-12-01                                         Max.   :46328.8  \n                                                                             \n\n\nShow the code\nglimpse(Trade_region)\n\n\nRows: 432\nColumns: 8\nGroups: country [6]\n$ country          <chr> \"Asia \", \"Asia \", \"Asia \", \"Asia \", \"Asia \", \"Asia \",…\n$ year             <chr> \"2022\", \"2022\", \"2022\", \"2022\", \"2022\", \"2022\", \"2022…\n$ month            <ord> Jun, Jun, Jul, Jul, Sep, Sep, Mar, Mar, Dec, Dec, Aug…\n$ trade_country    <dbl> 4955298, 4955298, 4955298, 4955298, 4955298, 4955298,…\n$ period           <date> 2022-06-01, 2022-06-01, 2022-07-01, 2022-07-01, 2022…\n$ formatted_period <chr> \"2022 June\", \"2022 June\", \"2022 July\", \"2022 July\", \"…\n$ Type             <chr> \"import\", \"export\", \"import\", \"export\", \"import\", \"ex…\n$ Amount           <dbl> 46328.8, 42507.2, 46129.5, 43214.2, 45605.1, 37696.3,…"
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 4/Take-home Exercise 4.html#plotting-the-cycle-plot",
    "href": "Take-home Exercise/Take-home Exercise 4/Take-home Exercise 4.html#plotting-the-cycle-plot",
    "title": "Take-home Exercise 4",
    "section": "5.1 Plotting the cycle plot",
    "text": "5.1 Plotting the cycle plot\n\nBy regionBy countryBy top 10 country\n\n\n\n\nShow the code\ncp_region <- ggplot(data = Trade_region, aes(x = period, y = Amount)) +\n  geom_line(aes(colour = Type)) +\n  labs(x = \"Date\", y = \"Amount\", title = \"Imports & Exports by Region,  2022\") +\n  facet_wrap(~ country) +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\nggplotly(cp_region)\n\n\n\n\n\n\nFrom the above chart, we can see that Asia shows most significant import and export trade relation with Singapore since year 2020 to 2022, followed by Europe, European union, Oceania. Asia shows increasing trend during the mentioned time frame whereas Europe, European union, Oceania show stable trade trend. Hence, we will focus on about 80% of top trade with Singapore which are Asia and Europe.\n\n\n\n\nShow the code\ncp_country <- ggplot(data = Trade_country, aes(x = period, y = Amount)) +\n  geom_line(aes(colour = Type )) +\n  labs(x = \"Month\", y = \"Amount\", title = \"Imports & Exports by Region,  2022\") +\n  facet_wrap(~ country) +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\nggplotly(cp_country)\n\n\n\n\n\n\nFrom the above chart, we can observe that, Hong Kong, Indonesia, Mainland China, Malaysia, Republic of Korean,Switzerland,Taiwan, Thailand, United Arab Emirates,United Kingdom, United States, Vietnam, Socialist Republic are the top 10 countries which has most significant trade relation with Singapore from 2020 to 2022. We will further analyze these countries.\n\n\n\n\nShow the code\nTrade_top10<- Trade_country %>% \n  filter(country %in% c(\"Mainland China\", \"Malaysia\", \"Republic of Korean\", \"Switzerland\",\"Taiwan\", \"Thailand\",\"United Arab Emirates\",\"United Kingdom\", \"United States\", \"Vietnam, Socialist Republic Of\" ))\n\n\n\n\nShow the code\ncp_top10 <- ggplot(data = Trade_top10, aes(x = period, y = Amount)) +\n  geom_line(aes(colour = Type)) +\n  labs(x = \"Month\", y = \"Amount\", title = \"Imports & Exports by Region,  2022\") +\n  facet_wrap(~ country) +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\nggplotly(cp_top10)\n\n\n\n\n\n\nThe above chart shows top 10 countries which have the most significant trade relation with Singapore. Mainland China, Malaysia, and Taiwan are the top 3 countries which showed increasing import and export trade.Whereas the Thailand, United Arab Emirates, United Kingdom, United States, Vietnam showed stable import and export trend."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 4/Take-home Exercise 4.html#plotting-the-time-series-plot",
    "href": "Take-home Exercise/Take-home Exercise 4/Take-home Exercise 4.html#plotting-the-time-series-plot",
    "title": "Take-home Exercise 4",
    "section": "5.2 Plotting the time series plot",
    "text": "5.2 Plotting the time series plot\n\nBy regionBy top 10 countries\n\n\n\n\nShow the code\nts_region <- TradeM%>%\n  group_by(country) %>%\n  plot_time_series(period, trade_balance,.color_var = year,  .facet_ncol = 2, .facet_scales = \"free\", .interactive = TRUE)\nggplotly(ts_region)\n\n\n\n\n\n\nThe following is the time series plot for trade balance(import-export) by region.\n\n\n\n\nShow the code\nts_top10 <- TradeK%>%\n  group_by(country) %>%\n  filter(country %in% c(\"Mainland China\", \"Malaysia\", \"Republic of Korean\", \"Switzerland\",\"Taiwan\", \"Thailand\",\"United Arab Emirates\",\"United Kingdom\", \"United States\", \"Vietnam, Socialist Republic Of\" ))%>%\n  plot_time_series(period, trade_balance,.color_var = year,  .facet_ncol = 2, .facet_scales = \"free\", .interactive = TRUE)\nggplotly(ts_top10)\n\n\n\n\n\n\nThe following is the time series plot for trade balance(import-export) by top10 countries."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 4/Take-home Exercise 4.html#plotting-the-slopegraph",
    "href": "Take-home Exercise/Take-home Exercise 4/Take-home Exercise 4.html#plotting-the-slopegraph",
    "title": "Take-home Exercise 4",
    "section": "5.3 Plotting the slopegraph",
    "text": "5.3 Plotting the slopegraph\n\nImports by regionExports by regionImports by top 10 countriesExports by top 10 countries\n\n\n\n\nShow the code\nTrade_region %>%\n  filter(Type == \"import\")%>%\n  group_by(country, year) %>%\n  summarise(Amount = sum(Amount)) %>%\n  mutate(year = factor(year)) %>%\n  filter(year %in% c(2020, 2021,2022)) %>%\n  newggslopegraph(year, Amount, country,\n                  Title = \"Imports by Region\",\n                  SubTitle = \"2020 to 2022\",\n                  Caption = \"Source: Department of Statistics, Singapore\")\n\n\n\n\n\nThe above chart shows Asia has increasing trend of imports from year 2020 to 2022.\n\n\n\n\nShow the code\nTrade_region %>%\n  filter(Type == \"export\")%>%\n  group_by(country, year) %>%\n  summarise(Amount = sum(Amount)) %>%\n  mutate(year = factor(year)) %>%\n  filter(year %in% c(2020, 2021,2022)) %>%\n  newggslopegraph(year, Amount, country,\n                  Title = \"Exports by Region\",\n                  SubTitle = \"2020 to 2022\",\n                  Caption = \"Source: Department of Statistics, Singapore\")\n\n\n\n\n\nThe above chart shows Asia has increasing trend of exports from year 2020 to 2022.\n\n\n\n\nShow the code\nTrade_top10 %>%\n  filter(Type == \"import\")%>%\n  group_by(country, year) %>%\n  summarise(Amount = sum(Amount)) %>%\n  mutate(year = factor(year)) %>%\n  filter(year %in% c(2020, 2021,2022)) %>%\n  newggslopegraph(year, Amount, country,\n                  Title = \"Imports by top10 countries\",\n                  SubTitle = \"2020 to 2022\",\n                  Caption = \"Source: Department of Statistics, Singapore\")\n\n\n\n\n\nThe above chart shows the imports trend of top10 countries which have most trade relation with Singapore.\n\n\n\n\nShow the code\nTrade_top10 %>%\n  filter(Type == \"export\")%>%\n  group_by(country, year) %>%\n  summarise(Amount = sum(Amount)) %>%\n  mutate(year = factor(year)) %>%\n  filter(year %in% c(2020, 2021,2022)) %>%\n  newggslopegraph(year, Amount, country,\n                  Title = \"Exports by top10 countries\",\n                  SubTitle = \"2020 to 2022\",\n                  Caption = \"Source: Department of Statistics, Singapore\")\n\n\n\n\n\nThe above chart shows the exports trend of top10 countries which have most trade relation with Singapore."
  },
  {
    "objectID": "Take-home Exercise/Take-home Exercise 4/Take-home Exercise 4.html#plotting-horizon-plot",
    "href": "Take-home Exercise/Take-home Exercise 4/Take-home Exercise 4.html#plotting-horizon-plot",
    "title": "Take-home Exercise 4",
    "section": "5.4 Plotting Horizon Plot",
    "text": "5.4 Plotting Horizon Plot\n\nTrade balance by regionTrade balance by top 10 countries\n\n\n\n\nShow the code\nTradeM %>% \n \n  filter(period >= \"2020-01-01\") %>%\n  ggplot() +\n  geom_horizon(aes(x = period, y=trade_balance), \n               origin = \"midpoint\", \n               horizonscale = 6)+\n  facet_grid(`country`~.) +\n    theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n    scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\") +\n  ggtitle('Trade blance by region (Jan 2020 to Dec 2022)')\n\n\n\n\n\nThe chart shows there is large trade balance in Asia. The darker area, the larger balance.\n\n\n\n\nShow the code\nTradeK %>% \n  filter(country %in% c(\"Mainland China\", \"Malaysia\", \"Republic of Korean\", \"Switzerland\",\"Taiwan\", \"Thailand\",\"United Arab Emirates\",\"United Kingdom\", \"United States\", \"Vietnam, Socialist Republic Of\" ))%>%\n  filter(period >= \"2020-01-01\") %>%\n  ggplot() +\n  geom_horizon(aes(x = period, y=trade_balance), \n               origin = \"midpoint\", \n               horizonscale = 6)+\n  facet_grid(`country`~.) +\n    theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n    scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\") +\n  ggtitle('Top 10 countries Trade blance (Jan 2020 to Dec 2022)')\n\n\n\n\n\nThe chart shows there is large trade balance in Mainland China, Malaysia and Taiwan. The darker area, the larger balance."
  }
]